@implements IDisposable
@using System.Timers;
@using EMS.BlazorWasm.Client.Services.Chargepoint
@inject IChargepointService ChargepointService

<DashboardCard avatar="@Icons.Material.Filled.EvStation" title=@(_productInfo?.Model) subheader=@(string.Concat(_productInfo?.Name, " Socket #", _socketInfo?.id))>
    <Body>
        <MudText Typo="Typo.body1">
            Available @(_socketInfo?.powerAvailableFormatted) @(_socketInfo?.phases == 1 ? "1 phase": "3 phases") <br />
            Energy delivered @(_socketInfo?.realEnergyDeliveredFormatted) <br />
            <br />
            @(_socketInfo?.mode3StateMessage) @(_socketInfo?.lastChargingStateChanged)<br />
            Connected @(_socketInfo?.vehicleIsConnected) / Charging @(_socketInfo?.vehicleIsCharging)
        </MudText>
    </Body>
</DashboardCard>

@code{
    private bool _disposed = false;
    ProductInfoModel? _productInfo;
    SocketR? _socketInfo;
    SessionR? _sessionInfo;

    private System.Timers.Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var respPI = await ChargepointService.GetStationInfoAsync(CancellationToken.None);
        _productInfo = respPI.ProductInfo;

        var respSI = await ChargepointService.GetSessionInfoAsync(1, CancellationToken.None);
        _sessionInfo = respSI.sessionInfo;
        _socketInfo = respSI.socketInfo;

        _refreshTimer = new System.Timers.Timer()
        {
            Interval = 2500,
            AutoReset = true,
            Enabled = true
        };

        _refreshTimer.Elapsed += OnTimedEvent;
    }

    private async void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        var respSI = await ChargepointService.GetSessionInfoAsync(1, CancellationToken.None);
        _sessionInfo = respSI.sessionInfo;
        _socketInfo = respSI.socketInfo;
        StateHasChanged(); // We need to force a refresh
    }

    protected void DisposeTimer()
    {
        if (_refreshTimer != null)
        {
            _refreshTimer.Elapsed -= this.OnTimedEvent;
            _refreshTimer.Stop();
            _refreshTimer.Dispose();
            _refreshTimer = null;
        }
    }

    public void Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (_disposed) { return; }

        if (disposing)
        {
            DisposeTimer();
        }

        _disposed = true;


    }
}