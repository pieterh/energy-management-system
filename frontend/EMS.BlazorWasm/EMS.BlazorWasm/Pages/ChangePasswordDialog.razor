@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<MudDialog>
    <DialogContent>
        <EditForm EditContext="@_editContext">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem>
                    <MudCard>
                        <MudCardContent>
                            <MudTextField OnlyValidateIfDirty="true" @bind-Value="_model.OldPassword" For="@(() => _model.OldPassword)" Label="Old password" Variant="Variant.Outlined" AutoFocus="true"></MudTextField>
                            <MudTextField OnlyValidateIfDirty="true" @bind-Value="_model.NewPassword1" For="@(() => _model.NewPassword1)" Label="New password" InputType="@_passwordInput" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" AdornmentAriaLabel="Show Password" OnAdornmentClick="onShowPasswordClick"></MudTextField>
                            <MudTextField OnlyValidateIfDirty="true" @bind-Value="_model.NewPassword2" For="@(() => _model.NewPassword2)" Label="Confirm password" InputType="@_passwordInput" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" AdornmentAriaLabel="Show Password" OnAdornmentClick="onShowPasswordClick"></MudTextField>
                            <MudText Typo="Typo.body1">@(_model.Message)</MudText>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-end flex-grow-1 gap-4">
                            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" OnClick="onLoginClick">
                                @if (_processing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Changing password</MudText>
                                }
                                else
                                {
                                    <MudText>Change password</MudText>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Inject]
    public IUserService UserService { get; set; } = default!;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;


    public class LoginFormModel
    {
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 12 characters long.", MinimumLength = 12)]
        public string OldPassword { get; set; } = default!;

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 12 characters long.", MinimumLength = 12)]
        public string NewPassword1 { get; set; } = default!;

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 12 characters long.", MinimumLength = 12)]
        public string NewPassword2 { get; set; } = default!;

        public string Message { get; set; } = default!;
    }

    private LoginFormModel _model = new LoginFormModel();
    private EditContext _editContext = default!;

    private bool _processing = false;

    private bool _isRememberMe = false;

    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _isShowLoginPassword = false;
    private InputType _passwordInput = InputType.Password;

    protected override void OnInitialized()
    {
        _editContext = new(_model);
    }

    void onShowPasswordClick()
    {
        if (_isShowLoginPassword)
        {
            _isShowLoginPassword = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShowLoginPassword = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task onLoginClick()
    {
        //if (_editContext.Validate())
        {
            var data = new SetPasswordModel()
            {
                OldPassword = _model.OldPassword,
                NewPassword = _model.NewPassword1
            };

            try
            {
                _model.Message = string.Empty;
                _processing = true;
                StateHasChanged();

                var resp = await UserService.SetPasswordAsync(data, CancellationToken.None);
                if (resp.Status == 200)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    _model.Message = string.Concat(resp.StatusText, " ", resp.Message);
                }
            }
            finally
            {
                _processing = false;
                StateHasChanged();
            }
        }
    }
}
