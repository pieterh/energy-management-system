@implements IDisposable
@page "/login"
@inject IDialogService DialogService
@using System.Timers;

@code {
    private bool _disposed = false;
    // We need to use a timer to open the dialog and let it stay open when this page is loaded after a route change
    private System.Timers.Timer? _timer = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            DisposeTimer();

            _timer = new System.Timers.Timer()
            {
                Interval = 1,
                AutoReset = false,
                Enabled = true                    
            };
            
            _timer.Elapsed += this.OnTimedEvent;
        }
    }

    private async void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        DisposeTimer();
        DialogOptions opt = new DialogOptions()
        {
            Position = DialogPosition.Center,
            DisableBackdropClick = true,
            CloseOnEscapeKey = false
        };
        await DialogService.ShowAsync<LoginDialog>("Login", opt);
    }

    protected void DisposeTimer()
    {
        if (_timer != null)
        {
            _timer.Elapsed -= this.OnTimedEvent;
            _timer.Stop();
            _timer.Dispose();
            _timer = null;
        }
    }

    public void Dispose()
    {
        // Dispose of unmanaged resources.
        Dispose(true);
        // Suppress finalization.
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (_disposed) { return; }

        if (disposing)
        {
            DisposeTimer();
        }

        _disposed = true;
    }
}
