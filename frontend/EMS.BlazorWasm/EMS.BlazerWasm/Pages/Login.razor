@page "/login"
@inject IDialogService DialogService
@using System.Timers;

@code {
    // We need to use a timer to open the dialog and let it stay open when this page is loaded after a route change
    private System.Timers.Timer? _timer = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_timer != null)
                DisposeTimer();

            _timer = new System.Timers.Timer(1);
            _timer.Elapsed += this.OnTimedEvent;
            _timer.AutoReset = false;
            _timer.Enabled = true;
        }
    }

    private async void OnTimedEvent(Object? source, ElapsedEventArgs e)
    {
        DisposeTimer();
        DialogOptions opt = new DialogOptions() {
            Position = DialogPosition.Center,
            DisableBackdropClick = true,
            CloseOnEscapeKey = false
        };
        await DialogService.ShowAsync<LoginDialog>("Login", opt);
    }

    protected void DisposeTimer()
    {
        if (_timer != null)
        {
            _timer.Elapsed -= this.OnTimedEvent;
            _timer.Stop();
            _timer.Dispose();
            _timer = null;
        }
    }

    public void Dispose()
    {
        DisposeTimer();
    }
}
