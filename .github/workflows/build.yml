name: build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]

    steps:    
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
        registry-url: 'https://registry.npmjs.org'
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: dotnet info
      run: dotnet --info     
    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ./sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarQube scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p ./.sonar/scanner 
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    - name: Install dependencies
      run: dotnet restore
      working-directory: backend
    - name: Scan for projects
      id: find-projects
      shell: bash
      run: |
        allprojs=$(find . -name '*.csproj' -type f | paste -s -d ',' -)
        projs=$(find . -name '*.csproj' -type f -not -name '*Tests*' | paste -s -d ',' -)
        testprojs=$(find . -name '*.csproj' -type f -name '*Tests*' | paste -s -d ',' -)
        echo "allprojects=${allprojs}" >> $GITHUB_OUTPUT
        echo "projects=${projs}" >> $GITHUB_OUTPUT
        echo "testprojects=${testprojs}" >> $GITHUB_OUTPUT
      working-directory: backend       
    - name: Dependencies vulnerability scan - excluding test projects
      shell: bash
      if: ${{ false }}
      run: |        
        IFS="," read -a myarray <<< ${{ steps.find-projects.outputs.PROJECTS }}
        for i in "${myarray[@]}"; do            
          dotnet list ${i} package --vulnerable --include-transitive 2>&1 | tee -a vulnerability_scan.log
        done 
        vulnerabilities=true
        grep ">" vulnerability_scan.log | grep -q -i "critical\|high\|moderate\|low" || vulnerabilities=false && true
        [ $vulnerabilities = true ] && echo "Security Vulnerabilities found on the log output" && exit 1
        exit 0
      working-directory: backend
    - name: Dependencies vulnerability scan
      shell: bash
      run: |        
        dotnet list package --vulnerable --include-transitive 2>&1 | tee -a vulnerability_scan.log
        vulnerabilities=true
        grep ">" vulnerability_scan.log | grep -q -i "critical\|high\|moderate\|low" || vulnerabilities=false && true
        [ $vulnerabilities = true ] && echo "Security Vulnerabilities found on the log output" && exit 1
        exit 0
      working-directory: backend
    - name: Dependencies deprecation scan
      shell: bash
      run: |
        dotnet list package --deprecated 2>&1 | tee -a deprecation_scan.log
        deprecations=true
        grep -i "has the following deprecated packages" deprecation_scan.log || deprecations=false && true
        [ $deprecations = true ] && echo "Deprecated packages found on the log output" && exit 1
        exit 0
      working-directory: backend
    - name: SonarQube - Begin
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      run: ../.sonar/scanner/dotnet-sonarscanner begin /k:"pieterh_energy-management-system" /o:"pieterh" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.branch.name="${{ github.ref_name }}" /d:"sonar.cs.vstest.reportsPaths=**/TestResults/*.trx" /d:"sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml" /d:"sonar.coverage.exclusions=**/*Tests.cs" /d:"sonar.exclusions=**/*Tests.cs" /d:"sonar.tests.exclusions=**/*Tests.cs"          
      working-directory: backend
    - name: Build - backend
      run: dotnet build --no-restore --configuration Release
      working-directory: backend
    - name: Test - backend
      run: dotnet test --no-restore --configuration Release --verbosity normal --logger "trx;LogFileName=TestResults.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      working-directory: backend
    - name: SonarQube - End
      if: ${{ !startsWith(github.ref, 'refs/heads/dependabot') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      run: ../.sonar/scanner/dotnet-sonarscanner end
      working-directory: backend
    - name: Publish - backend
      run: |
        dotnet publish --no-restore --configuration Release --output publish/ems backend/EMS
        ls -la publish/ems
    - name: Install yarn
      run: npm install --global yarn
      working-directory: frontend/EMS.ReactApp
    - name: Install packages using yarn and respect lock file
      run: yarn install --frozen-lockfile
      working-directory: frontend/EMS.ReactApp
    - name: Build - frontend
      run: npm run build
      working-directory: frontend/EMS.ReactApp
    - name: Build the docker image
      if: github.ref != 'refs/heads/main'
      run: |
        docker build . --file docker/dockerfile --build-arg BACKEND=publish/ems --build-arg FEREACT=frontend/EMS.ReactApp/dist/
    - name: Push the docker image
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin docker.io
        docker build . --file docker/dockerfile --tag docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
        docker push docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
